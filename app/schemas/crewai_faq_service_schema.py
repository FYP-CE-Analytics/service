from pydantic import BaseModel, Field
from typing import List


class CrewAIFAQInputSchema(BaseModel):
    """
    Schema for CrewAI FAQ Service
    """
    unit_id: str = Field(
        ...,
        title="Unit ID",
        description="The unique identifier for the unit.",
        example="12345"
    )
    unit_name: str = Field(
        ...,
        title="Unit Name",
        description="The name of the unit.",
        example="Introduction to CrewAI"
    )
    questions: list[dict] = Field(
        ...,
        title="Questions",
        description="List of questions to be answered.",
        example=["What is CrewAI?", "How does it work?"]
    )
    content: str = Field(
        ...,
        title="Content",
        description="The unit contents",

    )
    start_date: str = Field(
        ...,
        title="Start Date",
        description="The start date for the analysis.",
        example="2023-01-01"
    )
    end_date: str = Field(
        ...,
        title="End Date",
        description="The end date for the analysis.",
        example="2023-12-31"
    )

    assessment: str = Field(
        default="",
        title="Assessment",
        description="The assessment of the unit.",
        example="This unit provides a comprehensive overview of CrewAI."

    )

    weeks: list[str] = Field(
        default_factory=list,
        title="Weeks",
        description="List of weeks in the unit.",
        example=["Week 1: Introduction", "Week 2: Advanced Topics"]
    )

    weekly_content: list[str] = Field(
        default_factory=list,
        title="Weekly Content",
        description="List of weekly content in the unit.",
        example=["Week 1: Introduction to CrewAI", "Week 2: Advanced Topics"]
    )


class QuestionClusterSchema(BaseModel):
    """
    Schema for Question Cluster
    """
    theme: str = Field(
        ...,
        title="Theme",
        description="The theme of the question cluster.",
        example="Question on how to setup laptop"
    )
    summary: str = Field(
        ...,
        title="Summary",
        description="The summary of the question cluster.",
        example="Question on how to setup laptop"
    )
    questionIds: list[str] = Field(
        ...,
        title="Question IDs",
        description="List of question IDs in the cluster.",
        example=["123", "456"]
    )


class CrewAIFAQOutputSchema(BaseModel):
    """
    Schema for CrewAI FAQ Service Output
    """
    report: str = Field(
        ...,
        title="Report",
        description="The report generated by the Report writing task.",
        example="CrewAI FAQ Report"
    )
    # questions: List[QuestionClusterSchema] = Field(
    #     ...,
    #     title="Question IDs",
    #     description="List of question IDs in the cluster.",
    #     example=[{"theme": "Question on how to setup laptop",
    #               "questionIds": ["123", "456"]}]
    # )


class CrewAIThemeOutputSchema(BaseModel):
    """
    Schema for CrewAI Theme Output
    """
    questions: List[QuestionClusterSchema] = Field(
        ...,
        title="Question IDs",
        description="List of question IDs in the cluster.",
        example=[{"theme": "Question on how to setup laptop",
                  "questionIds": ["123", "456"], "summary": "Question on how to setup laptop"}])


class CrewAIFAQRunOutputSchema(BaseModel):
    """
    Schema for CrewAI FAQ Run Output
    """
    report: str = Field(
        ...,
        title="Report",
        description="The report generated by the FAQ writer task."
    )
    questions: List[QuestionClusterSchema] = Field(
        ...,
        title="Questions",
        description="List of question clusters identified by the theme extractor task."
    )
